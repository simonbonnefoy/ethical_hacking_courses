#!/usr/bin/env python

import requests
import re
import urlparse
from BeautifulSoup import BeautifulSoup

class Scanner:
    def __init__(self, url, ignore_links):
        #creating a session, not to lose connection
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links

    def extract_links_form(self, url):
        '''function extracting and returning all the links in at a url'''
        response = self.session.get(url)
        #response = requests.get(url)
        return re.findall('(?:href=")(.*?)"',response.content)
    
    
    def crawl(self, url = None):
        '''Crawl function. It searches recursively for all the url in each pages, follow the links
            found, and keep searching in the new pages.
            This method will also fill the target_links list'''

        if url == None:
            url = self.target_url

        href_links = self.extract_links_form(url)
        for link in href_links:
            #looping to check all the url linked in one given url
            link = urlparse.urljoin(url, link)
            
            #ignoring the urls that don't go to new pages
            if "#" in link:
                link = link.split("#")[0]
        
            if self.target_url in link and link not in self.target_links \
                    and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                self.crawl(link)
    
    def extract_forms(self, url):
        '''Method extracting and returning as a list all the forms from a given url'''
        #getting the url
        response = self.session.get(url)
        
        #retrieve the html code in BS format
        parse_html = BeautifulSoup(response.content)
        
        #get all the form in the page
        return parse_html.findAll("form")

    def submit_form(self, form, value, url):
        '''Method submiting a form with set value to a given url'''
        #action is the location where you send the data (e.g. credentials)
        action = form.get("action")
        #making sure the url is absolute path, not relative
        post_url = urlparse.urljoin(url, action)
        #which html method is used
        method = form.get("method")

        #Get the list of all the inputs in the form
        inputs_list = form.findAll("input")

        #preparing the dict where the data will be stored
        post_data = {}

        #Retrieving all the parameters in the input
        #and create a dict as in guess_login, to send later.
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value

            #setting all the input name/value in the dictionnary
            post_data[input_name] = input_value

        #submiting the data to the action retrieved in the page
        #make sure of the method used
        if method == "post":
            return self.session.post(post_url, data=post_data) 
        return self.session.get(post_url, params=post_data)

    
    def run_scanner(self):
        '''Method running the scanner that will check vulnerabilities 
            in all the urls of the web site
            It will search for vulnerabilities in the forms and in the urls'''

        #searching for vulnerabilities in all the stored url of the website
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print("[+] Testing form in " + link)

                #search for xss vulnerabilities
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print("\n\n[***] XSS discovered in " + link + " in the following form")
                    print(form)

            #testing if the link sends data to the web app and checking vuln
            if "=" in link:
                print("[+] Testing " + link)

                #search for xss vulnerabilities
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print("\n\n[***] XSS discovered in " + link)

    def test_xss_in_form(self, form, url):
        '''method to test xss in a form present in the page.
        The JS is sent as a value of the form'''
        
        xss_test_script = "<scriPt>alert('XSS')</sCript>"
        response = self.submit_form(form, xss_test_script, url)

        return xss_test_script in response.content

    def test_xss_in_link(self, url):
        '''method to test xss in a url.
        The JS is send as a parameter in the url'''
        xss_test_script = "<scriPt>alert('XSS')</sCript>"
        url = url.replace("=","=" + xss_test_script)
        response = self.session.get(url)

        return xss_test_script in response.content


